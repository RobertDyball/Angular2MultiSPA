
@using Angular2MultiSPA.ViewModels
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper "*,Angular2MultiSPA"
@model SampleData

<div class="row">

    <p class="small">
        NOTE: Code below for illustration only. The left and right parentheses are active characters, used within angular 2. In code blocks below they have been represented as &quot;(&quot; and &quot;)&quot; instead of &quot;{{ '{' }}&quot; or &quot;{{ '}' }}&quot; to avoid being mishandled by Razor on the server or Angular on the client.<br />
        Until the multiple levels of delimiting needed,are added, please copy any code directly from the source on <a href="https://github.com/RobertDyball/Angular2MultiSPA" target="_blank">GitHub here</a> instead.<br />
    </p>

    <!-- http://codepen.io/jek/pen/BoWNRy?css-preprocessor=sass  -->
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" href="#tagin" role="tab" data-toggle="tab">Data Entry Tag Helpers</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#tagda" role="tab" data-toggle="tab">Data Input Tag Helpers</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#references" role="tab" data-toggle="tab">References, Notes</a>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane fade in active" id="tagin">
            <div class="card">
                <div class="card-block">
                    <div class="col-md-2"><h4 class="card-title">Server</h4></div>
                    <div class="col-md-10">
                        <p class="small">(1) Define data model + Web API data services on server (not shown here), create a CSHTML page (instead of hard-coded HTML template) add markup using tag helpers + intellisense.</p>
                    </div>
                </div>
                <div class="card-block">
                    <div class="col-md-5">
                        <h6 class="card-subtitle text-muted">excerpt from C# data model, using optional data attributes</h6>
                        <code>
                            <pre>
                            @{
                                Write(@"
        [DataType(DataType.Time)]
        public DateTime TimeVar ( get; set; )
        public DateTime string ( get; set; )
        [DataType(DataType.Currency)]
        public decimal Currency ( get; set; )
        public string Text ( get; set; )
        [DataType(DataType.EmailAddress)]
        public string EmailAddress ( get; set; )
");
                            }
                        </pre>
                        </code>
                    </div>

                    <div class="col-md-1">
                        <i style="font-size:x-large" class="icon ion-md-arrow-forward fadeIn"></i>
                    </div>

                    <div class="col-md-6">
                        <h6 class="card-subtitle text-muted">CSHTML markup using tag helpers</h6>
                        <code>
                            <pre>
                        @{
                            // NOTE: delimitered code here for literal display; 
                            // the following code is not executed here, actual code is further below.
                            Write(@"
        <div *ngIf=""sampleData != null"">
            <tag-da bind-pa=""sampleData"" for=""DateTimeVar""></tag-da >
            <tag-da bind-pa=""sampleData"" for=""Currency""></tag-da>
            <tag-da bind-pa=""sampleData"" for=""Text""></tag-da>
            <tag-da bind-pa=""sampleData"" for=""EmailAddress""></tag-da>
        </div>
");
                        }
                    </pre>
                        </code>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-block">
                    <div class="col-md-2"><h4 class="card-title">Angular 2</h4></div>
                    <div class="col-md-6">
                        <p class="small">(2) Create angular data model, data services (manually or using NSwag) create angular component</p>
                    </div>
                    <div class="col-md-4"><i style="font-size:x-large" class="icon ion-md-arrow-down fadeIn"></i></div>
                </div>
                <div class="card-block">
                    <div class="col-md-5">
                        <h6 class="card-subtitle text-muted">typical angular service</h6>
                        <code>
                            <pre>
                            @{
                                Write(@"
    import ( Injectable ) from '@angular/core';
    import ( Http, Response, RequestOptions ) from '@angular/http';
    import ( Observable ) from 'rxjs/Rx';
    import 'rxjs/add/operator/map';
    import 'rxjs/add/operator/catch';
    import ( AuthService ) from './auth.service';
    import ( SampleData ) from '../models/sampleData.ts';
    @Injectable()
    export class SampleDataService (
        constructor(private http: Http, private authService: AuthService) ( )
        getSampleData(): Observable<SampleData> (
            return this.http.get('api/sampleData', ( headers: this.authService.jsonHeaders() ))
                .map((resp: Response) => resp.json())
                .catch(this.handleError);
        )
        handleError(error: any) (
            console.error(error);
            return Observable.throw(error.json().error || 'Server error');
        )
    )
");
                            }
                        </pre>
                        </code>

                        <h6 class="card-subtitle text-muted">excerpt from angular data model</h6>
                        <code>
                            <pre>
                                @{
                                    Write(@"
    import ( Component ) from '@angular/core';
    export class SampleData (
        dateTimeVar: Date;
        currency: number;
        text: string;
        emailAddress: string;
    )
");
                                }
                            </pre>
                        </code>
                    </div>

                    <div class="col-md-1">
                        <i style="font-size:x-large" class="icon ion-md-arrow-forward fadeIn"></i>
                    </div>

                    <div class="col-md-6">
                        <h6 class="card-subtitle text-muted">Angular component; note use of C# partial view in plce of HTML template or template URL</h6>
                        <code>
                            <pre>
                                @{
                                    // NOTE: delimitered code here for literal display; 
                                    // the following code is not executed here, actual code is further below.
                                    Write(@"
    import ( Component, OnInit ) from '@angular/core';
    import ( DomSanitizer) from '@angular/platform-browser';
    import ( SampleDataService ) from './services/SampleData.service';
    import ( SampleData ) from './models/SampleData.ts';
    @Component((
        selector: 'my-content',
        templateUrl: '/partial/documentationComponent'
    ))
    export class DocumentationComponent implements OnInit (
        sampleData: SampleData = null;
        constructor(
            private _DomSanitizer: DomSanitizer,
            private sampleDataService: SampleDataService
        ) ( )
        ngOnInit() (
            this.sampleDataService.getSampleData()
                .subscribe((data: SampleData) => this.sampleData = data);
        )
    )
");
                                }
                            </pre>
                        </code>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-block">
                    <div class="col-md-7"><h4 class="card-title">Browser</h4></div>
                    <div class="col-md-5"><i style="font-size:x-large" class="icon ion-md-arrow-down fadeIn"></i></div>
                </div>
                <div class="card-block">
                    <div class="col-md-5">
                        <h6 class="card-subtitle text-muted">Actual output, as seen in browser</h6>
                        <br />
                        <div *ngIf="sampleData != null">
                            <tag-da bind-pa="sampleData" for="DateTimeVar"></tag-da>
                            <tag-da bind-pa="sampleData" for="Text"></tag-da>
                        </div>
                    </div>

                    <div class="col-md-1">
                        <i style="font-size:x-large" class="icon ion-md-arrow-back fadeIn"></i>
                    </div>

                    <div class="col-md-6">
                        <h6 class="card-subtitle text-muted">HTML generated from above, sent from server to browser</h6>
                        <code>
                            <pre>
                                @{
                                    Write(@"
    <div *ngIf=""sampleData != null"">
        <div><span>((sampleData.dateTimeVar | date:'dd/MM/yyyy hh:mm:ss'))</span></div>
        <div><span>((sampleData.text))</span></div>
    </div>");
                                }
                            </pre>
                        </code>
                    </div>
                </div>
            </div>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="tagda">

            <div class="card">
                <div class="card-block">
                    <div class="col-md-2"><h4 class="card-title">Server</h4></div>
                    <div class="col-md-10">
                        <p class="small">(1) Define data model + Web API data services on server (not shown here), create a CSHTML page (instead of hard-coded HTML template) add markup using tag helpers + intellisense.</p>
                    </div>
                </div>
                <div class="card-block">
                    <div class="col-md-5">
                        <h6 class="card-subtitle text-muted">excerpt from C# data model, using optional data attributes</h6>
                        <code>
                            <pre>
                                @{
                                    Write(@"
    [DataType(DataType.Currency)]
    public decimal Currency ( get; set; )
    [Required]
    [StringLength(100, ErrorMessage = ""The (0) must be at least (2) characters long."",
                       MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = ""Password"")]
    public string Password ( get; set; )");
                                }
                            </pre>
                        </code>
                    </div>

                    <div class="col-md-1">
                        <i style="font-size:x-large" class="icon ion-md-arrow-forward fadeIn"></i>
                    </div>

                    <div class="col-md-6">
                        <h6 class="card-subtitle text-muted">CSHTML markup using tag helpers</h6>
                        <code>
                            <pre>
                                @{
                                    // NOTE: delimitered code here for literal display; 
                                    // the following code is not executed here, actual code is further below.
                                    Write(@"
    <div *ngIf=""sampleData != null"">
        <tag-in bind-pa=""sampleData"" for=""Currency""></tag-da >
        <tag-in bind-pa=""sampleData"" for=""Password""></tag-da>
    </div>");
                                    }
                            </pre>
                        </code>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-block">
                    <div class="col-md-2"><h4 class="card-title">Angular 2</h4></div>
                    <div class="col-md-6">
                        <p class="small">(2) Create angular data model, data services (manually or using NSwag) create angular component</p>
                    </div>
                    <div class="col-md-4"><i style="font-size:x-large" class="icon ion-md-arrow-down fadeIn"></i></div>
                </div>
                <div class="card-block">
                    <div class="col-md-5">
                        <h6 class="card-subtitle text-muted">typical angular service</h6>
                        <code>
                            <pre>
                            @{
                                Write(@"
    import ( Injectable ) from '@angular/core';
    import ( Http, Response, RequestOptions ) from '@angular/http';
    import ( Observable ) from 'rxjs/Rx';
    import 'rxjs/add/operator/map';
    import 'rxjs/add/operator/catch';
    import ( AuthService ) from './auth.service';
    import ( SampleData ) from '../models/sampleData.ts';
    @Injectable()
    export class SampleDataService (
        constructor(private http: Http, private authService: AuthService) ( )
        getSampleData(): Observable<SampleData> (
            return this.http.get('api/sampleData', ( headers: this.authService.jsonHeaders() ))
                .map((resp: Response) => resp.json())
                .catch(this.handleError);
        )
        handleError(error: any) (
            console.error(error);
            return Observable.throw(error.json().error || 'Server error');
        )
    )
");
                            }
                        </pre>
                        </code>

                        <h6 class="card-subtitle text-muted">excerpt from angular data model</h6>
                        <code>
                            <pre>
                                @{
                                    Write(@"
    import ( Component ) from '@angular/core';
    export class SampleData (
        dateTimeVar: Date;
        currency: number;
        text: string;
        emailAddress: string;
    )
");
                                }
                            </pre>
                        </code>
                    </div>

                    <div class="col-md-1">
                        <i style="font-size:x-large" class="icon ion-md-arrow-forward fadeIn"></i>
                    </div>

                    <div class="col-md-6">
                        <h6 class="card-subtitle text-muted">Angular component; note use of C# partial view in plce of HTML template or template URL</h6>
                        <code>
                            <pre>
                                @{
                                    // NOTE: delimitered code here for literal display; 
                                    // the following code is not executed here, actual code is further below.
                                    Write(@"
    import ( Component, OnInit ) from '@angular/core';
    import ( DomSanitizer) from '@angular/platform-browser';
    import ( SampleDataService ) from './services/SampleData.service';
    import ( SampleData ) from './models/SampleData.ts';
    @Component((
        selector: 'my-content',
        templateUrl: '/partial/documentationComponent'
    ))
    export class DocumentationComponent implements OnInit (
        sampleData: SampleData = null;
        constructor(
            private _DomSanitizer: DomSanitizer,
            private sampleDataService: SampleDataService
        ) ( )
        ngOnInit() (
            this.sampleDataService.getSampleData()
                .subscribe((data: SampleData) => this.sampleData = data);
        )
    )
");
                                }
                            </pre>
                        </code>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-block">
                    <div class="col-md-7"><h4 class="card-title">Browser</h4></div>
                    <div class="col-md-5"><i style="font-size:x-large" class="icon ion-md-arrow-down fadeIn"></i></div>
                </div>
                <div class="card-block">
                    <div class="col-md-5">
                        <h6 class="card-subtitle text-muted">Actual output, as seen in browser</h6>
                        <br />
                        <div *ngIf="sampleData != null">
                            <tag-in bind-pa="sampleData" for="Currency"></tag-in>
                            <tag-in bind-pa="sampleData" for="Password"></tag-in>
                        </div>
                    </div>

                    <div class="col-md-1">
                        <i style="font-size:x-large" class="icon ion-md-arrow-back fadeIn"></i>
                    </div>

                    <div class="col-md-6">
                        <h6 class="card-subtitle text-muted">HTML generated from above, sent from server to browser</h6>
                        <code>
                            <pre>
                                @{
                                    // NOTE: delimitered code here for literal display; 
                                    // the following code is not executed here, actual code is further below.
                                    Write(@"
    <div *ngIf=""sampleData != null"">
        <div class=""form-group"">
            <div class=""input-group"">
                <span class=""input-group-addon"">$</span>
                <input #sampleData.currency class=""form-control"" id=""sampleData.currency"" 
                            placeholder=""Currency"" required=""required"" type=""Currency"">
            </div>
        </div>
        <div class=""form-group"">
                <input #sampleData.password class=""form-control"" id=""sampleData.password"" 
                    maxLength=""100"" minLength=""6"" placeholder=""Password"" required=""required"" type=""Password"">
        </div>
    </div>");
                                }
                            </pre>
                        </code>
                    </div>
                </div>
            </div>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="references">
            <br />
            <div class="card-deck">
                <div class="row">
                    <div class="card col-md-4">
                        <div class="card-title">
                            <h3>ASP.Net Core</h3>
                        </div>
                        <div class="card-block">
                            <p>
                                ASP.NET Core is a new open-source and cross-platform framework for building modern cloud based internet connected applications, such as web apps, IoT apps and mobile backends.
                                ASP.NET Core apps can run on <a href="https://www.microsoft.com/net/core/platform" target="_blank">.NET Core</a> or on the full .NET Framework.
                                It was architected to provide an optimized development framework for apps that are deployed to the cloud or run on-premises. It consists of modular components with minimal overhead, so you retain flexibility while constructing your solutions. You can develop and run your ASP.NET Core apps cross-platform on Windows, Mac and Linux. ASP.NET Core is open source at GitHub.
                            </p>
                            <p>
                                <a href="https://dot.net">Downloads</a><br />
                                <a href="https://www.asp.net/core">Training</a>
                            </p>
                        </div>
                    </div>
                    <div class="card col-md-4">
                        <div class="card-title">
                            <h3>ASP.Net Core MVC</h3>
                        </div>
                        <div class="card-block">
                            <p>ASP.NET Core MVC is a rich framework for building web apps and APIs using the Model-View-Controller design pattern.</p>
                            <p>The ASP.NET Core MVC framework is a lightweight, open source, highly testable presentation framework optimized for use with ASP.NET Core.
                            <p>ASP.NET Core MVC provides a patterns-based way to build dynamic websites that enables a clean separation of concerns. It gives you full control over markup, supports TDD-friendly development and uses the latest web standards.</p>
                            <p>
                                <a href="https://docs.microsoft.com/en-gb/aspnet/core/mvc/overview" target="_blank">Overview</a><br />
                                <a href="https://dot.net">Documentation, Download links</a>
                            </p>
                        </div>
                    </div>
                    <div class="card col-md-4">
                        <div class="card-title">
                            <h3>Tag Helpers</h3>
                        </div>
                        <div class="card-block">
                            <p>
                                .NET Core tag helpers allow you to create custom HTML tags that executed and rendered on the server prior to sending across the wire to the client browser.<br />
                                This allows you access to the rich Razor syntax, ability to read data from config. files, or query databases, call custom server side components or web services.<br />
                                The HTML generated can include standard HTML, embedded javascript, added CSS styles - and again, all of these are customisable before being sent to the client.<br />
                                <a href="httpshttps://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro">Introduction to Tag Helpers, Documentation</a>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="card col-md-4">
                        <div class="card-title">
                            <h3>Angular 2</h3>
                        </div>
                        <div class="card-block">
                            <p>
                                .NET Core and ASP.NET Core give you a blazing fast and modular platform for creating server applications that run on Windows, Linux and Mac.<br />
                                <a href="https://www.infoq.com/articles/Angular2-TypeScript-High-Level-Overview" target="_blank">InfoQ's High level overview</a><br />
                                <a href="https://angular.io/docs/ts/latest/">Documentation, Quickstart, Downloads</a><br />
                                <a href="https://angular.io/docs/ts/latest/api/">API Documentation</a>
                            </p>
                        </div>
                    </div>

                    <div class="card col-md-4">
                        <div class="card-title">
                            <h3>Bootstrap 4</h3>
                        </div>
                        <div class="card-block">
                            <p>Bootstrap is the world's most popular framework for building responsive, mobile-first sites and applications.</p>
                            <p>Inside you'll find high quality HTML, CSS, and JavaScript to make starting any project easier than ever.</p>
                            <p>Bootstrap employs a handful of important global styles and settings that you'll need to be aware of when using it, all of which are almost exclusively geared towards the normalization of cross browser styles.</p>
                            <p>
                                <a href="https://v4-alpha.getbootstrap.com/getting-started/introduction/" target="_blank">Introduction</a><br />
                                <a href="https://v4-alpha.getbootstrap.com/layout/overview" target="_blank">Documentation</a><br />
                                <a href="http://v4-alpha.getbootstrap.com/examples/" target="_blank">Examples</a>
                            </p>
                        </div>
                    </div>

                    <div class="card col-md-4">
                        <div class="card-title">
                            <h3>this project, where to start</h3>
                        </div>
                        <div class="card-block">
                            <p>Download from GitHub or clone this project from GitHub <a href="https://github.com/RobertDyball/Angular2MultiSPA" target="_blank">here.</a></p>
                            <p>Get the ASP.Net Core framework for your PC, Mac, workstation.</p>
                            <p>Download and install latest ASP.Net Core to suit your platform, see ASP.Net Core downloads here: http://asp.net ( currently latest version is 1.0.0-preview2-003133 )</p>
                            <p>If using Windows, use Visual Studio 2015 Update 3, with ASP.Net core tooling updates, or alternately use Visual Studio code.</p>
                            <p>Node.js and npm are essential to Angular 2 development and used by Visual Studio.</p>
                            <p>Install Typescript and Typings globally, as these will be used by the application.</p>
                            <code>
                                <pre>
                                npm install -g typescript 
                                npm install -g typings
                                dotnet restore
                            </pre>
                            </code>
                            <p>Alternately, open the solution Visual Studio 2015, Visual Studio Code which will (if setup correctly) restore dependencies for you.</p>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
</div>
